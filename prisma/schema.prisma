generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // Use 'postgresql' for PostgreSQL, 'sqlite' for SQLite, etc.
  url      = env("DATABASE_URL")
}

enum Category {
  MUSIC
  SPORT
  TECH
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  name          String
  phone         String?
  password      String
  bio           String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  events        Event[]
  comments      Comment[]
  likes         Like[]
  followers     Follower[]     @relation("UserFollowers")
  following     Follower[]     @relation("UserFollowing")
  notifications Notification[]
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  time        String
  location    String
  image       String?
  category    Category
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        Int        @id @default(autoincrement())
  content   String
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime   @default(now())
}

model Like {
  id        Int        @id @default(autoincrement())
  event     Event      @relation(fields: [eventId], references: [id])
  eventId   Int
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime   @default(now())
}

model Follower {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id])
  following   User     @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  type      String
  content   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}
